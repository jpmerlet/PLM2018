## Archivo atsp-donoso.run ##
reset;
##Seleccionar solvers y opciones
option solver cplex;
option cplex_options
'presolve=0 probe=-1 mipsearch=1 heuristicfreq=-1 mipalg=2 \
mipcuts=-1 splitcuts=-1 mcfcuts=-1 mipdisplay=4 cutstats=1 \
mipinterval=1 threads=1 mipstartstatus=0 mipstartvalue=0 \
logfile=log1.txt branch=-1 presolvenode=-1 \
timing=15 timelimit=600 return_mipgap=7';

## parametros para el reporte ##
param tiempo_ampl; 
param tiempo_solver;
param IP;
param LP;
param INT_GAP;
param RES_GAP;
param input_file symbolic; # nombre del archivo input 
param nombre_mod symbolic;

## cargar modelo ##
model atsp-donoso.mod;

# data "test1.dat";

# problem DFJmodel;

# print "## Archivo atsp-donoso.txt ##"> "atsp-donoso.txt";
# print "Instancia test1.dat" >> "atsp-donoso.txt";

# # resolver problema entero
# option DFJmodel.relax_integrality 0; solve;
# let IP:= LargoTour;
# let tiempo_solver := _solve_system_time;
# let tiempo_ampl := _ampl_time;

# # resolver problema relajado
# option DFJmodel.relax_integrality 1; solve;
# let LP:= LargoTour;
# let INT_GAP:= (IP-LP)/IP*100;
# let RES_GAP:= LargoTour.relmipgap;

# print "modelo DFJ" >> "atsp-donoso.txt";
# printf "LP: %4f IP: %4f INT-GAP: %4f % RES-GAP: %4f tiempo-ampl: %4f tiempo-solver: %4f\n", (LP),(IP),(INT_GAP),(RES_GAP),(tiempo_ampl),(tiempo_solver) >> "atsp-donoso.txt";

# # modelo MTZ
# reset data IP, tiempo_solver, tiempo_ampl, LP, INT_GAP, RES_GAP;
# problem MTZmodel;

# # resolver problema entero 
# option MTZmodel.relax_integrality 0; solve;
# let IP:= LargoTour;
# let tiempo_solver := _solve_system_time;
# let tiempo_ampl := _ampl_time;

# # resolver problema relajado
# option MTZmodel.relax_integrality 1; solve;
# let LP:= LargoTour;
# let INT_GAP:= (IP-LP)/IP*100;
# let RES_GAP:= LargoTour.relmipgap;

# print "modelo MTZ" >> "atsp-donoso.txt";
# printf "LP: %4f IP: %4f INT-GAP: %4f % RES-GAP: %4f tiempo-ampl: %4f tiempo-solver: %4f\n", (LP),(IP),(INT_GAP),(RES_GAP),(tiempo_ampl),(tiempo_solver) >> "atsp-donoso.txt";


printf "## Archivo atsp-donoso.txt ##\nInstancia test1.dat\n"> "atsp-donoso.txt";

# cargar datos de la instancia
#let input_file:= "test"&num_archivo&".dat";
#data (input_file);
data "test1.dat";

problem DFJmodel;

# resolver problema entero
option DFJmodel.relax_integrality 0; solve;
let IP:= LargoTour;
let tiempo_solver := _solve_system_time;
let tiempo_ampl := _ampl_time;
let RES_GAP:= LargoTour.relmipgap;

# resolver problema relajado
option DFJmodel.relax_integrality 1; solve;
let LP:= LargoTour;
let INT_GAP:= (IP-LP)/IP*100;

# guardar linea con los resultados
print "modelo DFJ" >> "atsp-donoso.txt";
printf "LP: %4f IP: %4f INT-GAP: %4f % RES-GAP: %4f tiempo-ampl: %4f tiempo-solver: %4f\n", (LP),(IP),(INT_GAP),(RES_GAP),(tiempo_ampl),(tiempo_solver) >> "atsp-donoso.txt";

# resetear datos a escribir
reset data IP, tiempo_solver, tiempo_ampl, LP, INT_GAP, RES_GAP;

# modelo MTZ
problem MTZmodel;

# resolver problema entero 
option MTZmodel.relax_integrality 0; solve;
let IP:= LargoTour;
let tiempo_solver := _solve_system_time;
let tiempo_ampl := _ampl_time;
let RES_GAP:= LargoTour.relmipgap;

# resolver problema relajado
option MTZmodel.relax_integrality 1; solve;
let LP:= LargoTour;
let INT_GAP:= (IP-LP)/IP*100;

print "modelo MTZ" >> "atsp-donoso.txt";
printf "LP: %4f IP: %4f INT-GAP: %4f % RES-GAP: %4f tiempo-ampl: %4f tiempo-solver: %4f\n", (LP),(IP),(INT_GAP),(RES_GAP),(tiempo_ampl),(tiempo_solver) >> "atsp-donoso.txt";

# resetear datos a escribir
reset data LP, IP, INT_GAP, RES_GAP, tiempo_ampl, tiempo_solver;

# modelo WONG
problem WONGmodel;

# resolver problema entero 
option WONGmodel.relax_integrality 0; solve;
let IP:= LargoTour;
let tiempo_solver := _solve_system_time;
let tiempo_ampl := _ampl_time;
let RES_GAP:= LargoTour.relmipgap;

# resolver problema relajado
option WONGmodel.relax_integrality 1; solve;
let LP:= LargoTour;
let INT_GAP:= (IP-LP)/IP*100;

print "modelo WONG" >> "atsp-donoso.txt";
printf "LP: %4f IP: %4f INT-GAP: %4f % RES-GAP: %4f tiempo-ampl: %4f tiempo-solver: %4f\n\n", (LP),(IP),(INT_GAP),(RES_GAP),(tiempo_ampl),(tiempo_solver) >> "atsp-donoso.txt";

reset data n,c;	
reset data LP, IP, INT_GAP, RES_GAP, tiempo_ampl, tiempo_solver;
##################################################################
############ Se resuelve para la segunda instancia ###############
##################################################################
data "test2.dat";

# problem DFJmodel;

printf "Instancia test2.dat\n" >> "atsp-donoso.txt";

# # resolver problema entero
# option DFJmodel.relax_integrality 0; solve;
# let IP:= LargoTour;
# let tiempo_solver := _solve_system_time;
# let tiempo_ampl := _ampl_time;
# let RES_GAP:= LargoTour.relmipgap;

# # resolver problema relajado
# option DFJmodel.relax_integrality 1; solve;
# let LP:= LargoTour;
# let INT_GAP:= (IP-LP)/IP*100;

# # guardar linea con los resultados
printf "modelo DFJ\nAMPL no pudo resolver esta instancia.\n" >> "atsp-donoso.txt";
# printf "LP: %4f IP: %4f INT-GAP: %4f % RES-GAP: %4f tiempo-ampl: %4f tiempo-solver: %4f\n", (LP),(IP),(INT_GAP),(RES_GAP),(tiempo_ampl),(tiempo_solver) >> "atsp-donoso.txt";

# # resetear datos a escribir
# reset data IP, tiempo_solver, tiempo_ampl, LP, INT_GAP, RES_GAP;

# # modelo MTZ
 problem MTZmodel;

# resolver problema entero 
option MTZmodel.relax_integrality 0; solve;

let IP:= LargoTour;
let tiempo_solver := _solve_system_time;
let tiempo_ampl := _ampl_time;
let RES_GAP:= LargoTour.relmipgap;

# resolver problema relajado
option MTZmodel.relax_integrality 1;solve;

let LP:= LargoTour;
let INT_GAP:= (IP-LP)/IP*100;

print "modelo MTZ" >> "atsp-donoso.txt";
printf "LP: %4f IP: %4f INT-GAP: %4f % RES-GAP: %4f tiempo-ampl: %4f tiempo-solver: %4f\n", (LP),(IP),(INT_GAP),(RES_GAP),(tiempo_ampl),(tiempo_solver) >> "atsp-donoso.txt";

# resetear datos a escribir
reset data LP, IP, INT_GAP, RES_GAP, tiempo_ampl, tiempo_solver;

# # modelo WONG
problem WONGmodel;

# resolver problema entero 
option WONGmodel.relax_integrality 0; 
solve;

let IP:= LargoTour;
let tiempo_solver := _solve_system_time;
let tiempo_ampl := _ampl_time;
let RES_GAP:= LargoTour.relmipgap;

# resolver problema relajado
option WONGmodel.relax_integrality 1; solve;
let LP:= LargoTour;
let INT_GAP:= (IP-LP)/IP*100;

print "modelo WONG" >> "atsp-donoso.txt";
printf "LP: %4f IP: %4f INT-GAP: %4f % RES-GAP: %4f tiempo-ampl: %4f tiempo-solver: %4f\n\n", (LP),(IP),(INT_GAP),(RES_GAP),(tiempo_ampl),(tiempo_solver) >> "atsp-donoso.txt";

reset data n,c;	
reset data LP, IP, INT_GAP, RES_GAP, tiempo_ampl, tiempo_solver;
# ##################################################################
# ############ Se resuelve para la tercera instancia ###############
# ##################################################################

data "test3.dat";
# problem DFJmodel;

print "Instancia test3.dat" >> "atsp-donoso.txt";

# # resolver problema entero
# option DFJmodel.relax_integrality 0; 
# option gentimes 1;
# option times 1;
# solve;

# let IP:= LargoTour;
# let tiempo_solver := _solve_system_time;
# let tiempo_ampl := _ampl_time;
# let RES_GAP:= LargoTour.relmipgap;

# # resolver problema relajado
# option DFJmodel.relax_integrality 1; solve;
# let LP:= LargoTour;
# let INT_GAP:= (IP-LP)/IP*100;

# # guardar linea con los resultados
# print "modelo DFJ" >> "atsp-donoso.txt";
# printf "LP: %4f IP: %4f INT-GAP: %4f % RES-GAP: %4f tiempo-ampl: %4f tiempo-solver: %4f\n", (LP),(IP),(INT_GAP),(RES_GAP),(tiempo_ampl),(tiempo_solver) >> "atsp-donoso.txt";
printf "modelo DFJ\nAMPL no pudo resolver esta instancia.\n" >> "atsp-donoso.txt";
# resetear datos a escribir
# reset data IP, tiempo_solver, tiempo_ampl, LP, INT_GAP, RES_GAP;

# modelo MTZ
problem MTZmodel;

# resolver problema entero 
option MTZmodel.relax_integrality 0; solve;

let IP:= LargoTour;
let tiempo_solver := _solve_system_time;
let tiempo_ampl := _ampl_time;
let RES_GAP:= LargoTour.relmipgap;

# resolver problema relajado
option MTZmodel.relax_integrality 1; solve;
let LP:= LargoTour;
let INT_GAP:= (IP-LP)/IP*100;

print "modelo MTZ" >> "atsp-donoso.txt";
printf "LP: %4f IP: %4f INT-GAP: %4f % RES-GAP: %4f tiempo-ampl: %4f tiempo-solver: %4f\n", (LP),(IP),(INT_GAP),(RES_GAP),(tiempo_ampl),(tiempo_solver) >> "atsp-donoso.txt";

# resetear datos a escribir
reset data LP, IP, INT_GAP, RES_GAP, tiempo_ampl, tiempo_solver;

# modelo WONG
problem WONGmodel;

# resolver problema entero 
option WONGmodel.relax_integrality 0; solve;

let IP:= LargoTour;
let tiempo_solver := _solve_system_time;
let tiempo_ampl := _ampl_time;
let RES_GAP:= LargoTour.relmipgap;

# resolver problema relajado
option WONGmodel.relax_integrality 1; solve;
let LP:= LargoTour;
let INT_GAP:= (IP-LP)/IP*100;

print "modelo WONG" >> "atsp-donoso.txt";
printf "LP: %4f IP: %4f INT-GAP: %4f % RES-GAP: %4f tiempo-ampl: %4f tiempo-solver: %4f\n", (LP),(IP),(INT_GAP),(RES_GAP),(tiempo_ampl),(tiempo_solver) >> "atsp-donoso.txt";